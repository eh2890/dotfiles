snippet start "start" bA
#!/usr/bin/env python
import os
import sys
from io import BytesIO, IOBase


def main():
    $0
    return


# region fastio

BUFSIZE = 8192

if (os.path.exists('input.txt')):
		sys.stdin = open('input.txt', 'r')
		sys.stdout = open('output.txt', 'w')

class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._file = file
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")


sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")

# endregion

if __name__ == "__main__":
    main()
endsnippet

snippet lmi "list map input" A
list(map(int, input().split()))
$0
endsnippet

snippet dsu "disjoint set union" b
class DSU:
	def __init__(self, li):
		self.n = len(li)
		self.root = {x: x for x in li}
		self.rank = {x: 1 for x in li}

	def find(self, x):
		if x == self.root[x]:
			return x
		self.root[x] = self.find(self.root[x])
		return self.root[x]

	def union(self, x, y):
		rx = self.find(x)
		ry = self.find(y)
		if rx != ry:
			if self.rank[rx] < self.rank[ry]:
				self.root[rx] = ry
			elif self.rank[rx] > self.rank[ry]:
				self.root[ry] = rx
			else:
				self.root[rx] = ry
				self.rank[ry] += 1

	def connected(self, x, y):
		return self.find(x) == self.find(y)
endsnippet
